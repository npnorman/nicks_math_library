#long algorithm

ln = lowest operator open()
for each token
	
	if no nodes
		root = token

	else
		setNodeChild(ln)



def setNodeChild(ln)
	if check(ln.left)
		ln.left = token
		if token is operator, set ln = ln.left
	else check(ln.right)
		ln.right = token
		if token is operator, set ln = ln.right
	else
		ln = lowest operator open()
		setNodeChild(ln)

def lowestOperatorOpen(node)
	
	if(node == null)
		return False, null

	if(node.left is null)
		return True, node
		#base case
	elif(node.left is opr)
		#go deeper
		res = lOO(node.left)
		if res[0] = True
			return res


	if(node.right is null)
		return True, node
		#base case
	elif(node.right is opr)
		#go deeper
		res = lOO(node.right)
		if res[0] = True
			return res

	if(node.left is Number && node.right is Number)
		return False, null
		#not lowest
	